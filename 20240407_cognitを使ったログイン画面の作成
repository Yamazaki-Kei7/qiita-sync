# Cognitoを使ったログイン画面の作成

このプロジェクトを実装するための手順は複雑で多岐にわたるため、マニュアルを複数のセクションに分けて説明します。このガイドはAWS Cognitoを使用して認証を管理し、Svelteをフロントエンドフレームワークとして使用することを前提としています。また、AWS CloudFormationやAWS CDKを使ってインフラストラクチャをコードとして管理し、GitHub Actionsを使ってCI/CDパイプラインを構築します。

## 1. プロジェクトのセットアップ

### 1.1. 必要なツールのインストール

- Node.js
- AWS CLI
- AWS CDK
- Git

### 1.2. 新しいSvelteプロジェクトの作成

1. コマンドラインで以下のコマンドを実行して、新しいSvelteプロジェクトを作成します。

    ```
    npx degit sveltejs/template svelte-cognito-app
    cd svelte-cognito-app
    npm install
    npm install -g @aws-amplify/cli
    ```

### 1.3. AWS CDKアプリケーションのセットアップ

1. **新しいディレクトリを作成**してから、または**既存の空のディレクトリ**を使用して、`cdk init`コマンドを実行します。`cdk init`は、**空のディレクトリ**でのみ実行できることに注意してください。

    ```
    mkdir cdk-setup
    cd cdk-setup
    cdk init app --language typescript
    ```

2. 必要なAWS CDKライブラリをインストールします。

    ```
    npm install @aws-cdk/aws-cognito @aws-cdk/aws-s3 @aws-cdk/aws-cloudfront @aws-cdk/aws-s3-deployment
    ```

## 2. AWS Cognitoユーザープールの作成

### 2.1. AWS CLIを使用してCognitoユーザープールを作成

1. 以下のコマンドを実行して、新しいCognitoユーザープールを作成します。

    ```
    aws cognito-idp create-user-pool --pool-name MyUserPool
    ```

2. 必要なCognitoアプリクライアントを作成します。

    ```
    aws cognito-idp create-user-pool-client --user-pool-id ap-northeast-1_iTdCC8uh0 --client-name MyUserPoolClient
    ```

## 3. Svelteアプリケーションの認証機能の追加

### 3.1. AWS Amplifyを使用して認証を統合

1. `svelte-cognito-app`ディレクトリに戻り、AWS Amplifyライブラリをインストールします。

    ```
    npm install @aws-amplify/auth @aws-amplify/ui-components
    ```

2. `src/main.js`にAmplifyの設定を追加します。

    ```javascript
    import Amplify from "@aws-amplify/core";
    import aws_exports from "./aws-exports";
    Amplify.configure(aws_exports);
    ```

3. 認証コンポーネントを`src/App.svelte`に追加します。

    ```svelte
    <script>
    import { onMount } from 'svelte';
    import { Auth } from '@aws-amplify/auth';
    import '@aws-amplify/ui-components';
    let user;
    
    onMount(async () => {
        user = await Auth.currentAuthenticatedUser();
    });
    </script>
    
    {#if user}
        <p>Hello, {user.username}</p>
    {:else}
        <amplify-authenticator></amplify-authenticator>
    {/if}

## 4. AWS CDKを使用したリソースのデプロイメント

### 4.1. S3バケットとCloudFrontディストリビューションのセットアップ

1. CDKを使用してS3バケットを作成し、CloudFrontで配信します。以下のコードを`svelte-cognito-app/cdk-setup/lib/cdk-setup-stack.ts`に追加します。

    ```typescript
    import { Stack, StackProps, RemovalPolicy, aws_cloudfront_origins } from "aws-cdk-lib";
    import { Construct } from "constructs";
    import * as s3 from "aws-cdk-lib/aws-s3";
    import * as cloudfront from "aws-cdk-lib/aws-cloudfront";
    import * as s3deploy from "aws-cdk-lib/aws-s3-deployment";
    import * as iam from "aws-cdk-lib/aws-iam";
    
    export class MyCdkStack extends Stack {
      constructor(scope: Construct, id: string, props?: StackProps) {
        super(scope, id, props);
    
        const bucket = new s3.Bucket(this, "MyBucket", {
          // Bucket設定は、用途に応じて調整してください
          websiteIndexDocument: "index.html",
          removalPolicy: RemovalPolicy.DESTROY,
          autoDeleteObjects: true, // バケット削除時にオブジェクトを自動削除
        });
    
        const originAccessIdentity = new cloudfront.OriginAccessIdentity(this, "OriginAccessIdentity", {
          comment: "OAI for MyBucket",
        });
    
        bucket.addToResourcePolicy(
          new iam.PolicyStatement({
            actions: ["s3:GetObject"],
            resources: [bucket.arnForObjects("*")],
            principals: [new iam.CanonicalUserPrincipal(originAccessIdentity.cloudFrontOriginAccessIdentityS3CanonicalUserId)],
          })
        );
    
        const distribution = new cloudfront.Distribution(this, "MyDistribution", {
          defaultBehavior: {
            origin: new aws_cloudfront_origins.S3Origin(bucket, {
              originAccessIdentity,
            }),
            viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
          },
        });
    
        new s3deploy.BucketDeployment(this, "DeployWebsite", {
          sources: [s3deploy.Source.asset("../public")],
          destinationBucket: bucket,
          distribution,
          distributionPaths: ["/*"],
        });
      }
    }
    ```

2. `svelte-cognito-app/cdk-setup/bin/cdk-setup.ts`は以下のコードに修正します。

    ```typescript
    #!/usr/bin/env node
    import "source-map-support/register";
    import { App } from "aws-cdk-lib";
    import { MyCdkStack } from "../lib/cdk-setup-stack";
    
    const app = new App();
    new MyCdkStack(app, "CdkSetupStack");
    ```

    

3. CDKを使用してインフラストラクチャをデプロイします。

    ```
    cd cdk-setup/
    cdk cdk bootstrap　--profile xxxxx
    cdk deploy --profile xxxxx
    ```

## 5. GitHub Actionsを使用したCI/CDのセットアップ

### 5.1. GitHubリポジトリの作成と初期設定

1. GitHubで新しいリポジトリを作成し、`svelte-cognito-app`ディレクトリの内容をpushします。

### 5.2. CI/CDワークフローの作成

1. プロジェクトのルートに`.github/workflows`ディレクトリを作成し、その中に`ci-cd.yml`ファイルを作成します。

2. `ci-cd.yml`に以下の内容を追加します。

    ```yaml
    name: CI/CD
    
    on:
      push:
        branches:
          - main
    
    jobs:
      build:
        runs-on: ubuntu-latest
    
        steps:
          - uses: actions/checkout@v2
          - name: Use Node.js
            uses: actions/setup-node@v1
            with:
              node-version: "14.x"
          - name: Install dependencies
            run: npm install
          - name: Build
            run: npm run build
          - name: Deploy to AWS S3
            run: |
              npm install -g aws-cdk
              cdk deploy --require-approval never
            env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_REGION: "us-east-1" # Change to your AWS region
    ```

3. AWSの認証情報をGitHub Secretsに追加します：`AWS_ACCESS_KEY_ID`と`AWS_SECRET_ACCESS_KEY`。

以上で、AWS Cognitoを使用した認証を含むSvelteアプリケーションのセットアップ、AWS CDKを使用してのインフラストラクチャのデプロイメント、そしてGitHub Actionsを使用してのCI/CDパイプラインの構築の手順が完了しました。
